// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trojangoapi.proto

#include "trojangoapi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_trojangoapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Speed_trojangoapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trojangoapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Traffic_trojangoapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trojangoapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_trojangoapi_2eproto;
namespace trojan {
namespace api {
class TrafficDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Traffic> _instance;
} _Traffic_default_instance_;
class SpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Speed> _instance;
} _Speed_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
class GetTrafficRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTrafficRequest> _instance;
} _GetTrafficRequest_default_instance_;
class GetTrafficResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTrafficResponse> _instance;
} _GetTrafficResponse_default_instance_;
class ListUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserRequest> _instance;
} _ListUserRequest_default_instance_;
class ListUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserResponse> _instance;
} _ListUserResponse_default_instance_;
class SetUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetUserRequest> _instance;
} _SetUserRequest_default_instance_;
class SetUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetUserResponse> _instance;
} _SetUserResponse_default_instance_;
}  // namespace api
}  // namespace trojan
static void InitDefaultsscc_info_GetTrafficRequest_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_GetTrafficRequest_default_instance_;
    new (ptr) ::trojan::api::GetTrafficRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::GetTrafficRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTrafficRequest_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTrafficRequest_trojangoapi_2eproto}, {
      &scc_info_User_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_GetTrafficResponse_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_GetTrafficResponse_default_instance_;
    new (ptr) ::trojan::api::GetTrafficResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::GetTrafficResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetTrafficResponse_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetTrafficResponse_trojangoapi_2eproto}, {
      &scc_info_Traffic_trojangoapi_2eproto.base,
      &scc_info_Speed_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_ListUserRequest_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_ListUserRequest_default_instance_;
    new (ptr) ::trojan::api::ListUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::ListUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUserRequest_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUserRequest_trojangoapi_2eproto}, {}};

static void InitDefaultsscc_info_ListUserResponse_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_ListUserResponse_default_instance_;
    new (ptr) ::trojan::api::ListUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::ListUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ListUserResponse_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ListUserResponse_trojangoapi_2eproto}, {
      &scc_info_User_trojangoapi_2eproto.base,
      &scc_info_Traffic_trojangoapi_2eproto.base,
      &scc_info_Speed_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_SetUserRequest_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_SetUserRequest_default_instance_;
    new (ptr) ::trojan::api::SetUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::SetUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetUserRequest_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetUserRequest_trojangoapi_2eproto}, {
      &scc_info_User_trojangoapi_2eproto.base,
      &scc_info_Speed_trojangoapi_2eproto.base,}};

static void InitDefaultsscc_info_SetUserResponse_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_SetUserResponse_default_instance_;
    new (ptr) ::trojan::api::SetUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::SetUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetUserResponse_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetUserResponse_trojangoapi_2eproto}, {}};

static void InitDefaultsscc_info_Speed_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_Speed_default_instance_;
    new (ptr) ::trojan::api::Speed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::Speed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Speed_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Speed_trojangoapi_2eproto}, {}};

static void InitDefaultsscc_info_Traffic_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_Traffic_default_instance_;
    new (ptr) ::trojan::api::Traffic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::Traffic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Traffic_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Traffic_trojangoapi_2eproto}, {}};

static void InitDefaultsscc_info_User_trojangoapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trojan::api::_User_default_instance_;
    new (ptr) ::trojan::api::User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trojan::api::User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_trojangoapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_User_trojangoapi_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trojangoapi_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_trojangoapi_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trojangoapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trojangoapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::Traffic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::Traffic, upload_traffic_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::Traffic, download_traffic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::Speed, upload_speed_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::Speed, download_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::User, password_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::User, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, success_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, traffic_total_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, speed_current_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::GetTrafficResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUserResponse, user_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUserResponse, online_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUserResponse, traffic_total_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUserResponse, speed_current_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::ListUserResponse, speed_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUserRequest, user_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUserRequest, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUserRequest, operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUserResponse, success_),
  PROTOBUF_FIELD_OFFSET(::trojan::api::SetUserResponse, info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::trojan::api::Traffic)},
  { 7, -1, sizeof(::trojan::api::Speed)},
  { 14, -1, sizeof(::trojan::api::User)},
  { 21, -1, sizeof(::trojan::api::GetTrafficRequest)},
  { 27, -1, sizeof(::trojan::api::GetTrafficResponse)},
  { 37, -1, sizeof(::trojan::api::ListUserRequest)},
  { 42, -1, sizeof(::trojan::api::ListUserResponse)},
  { 52, -1, sizeof(::trojan::api::SetUserRequest)},
  { 60, -1, sizeof(::trojan::api::SetUserResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_Traffic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_Speed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_GetTrafficRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_GetTrafficResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_ListUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_ListUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_SetUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trojan::api::_SetUserResponse_default_instance_),
};

const char descriptor_table_protodef_trojangoapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021trojangoapi.proto\022\ntrojan.api\";\n\007Traff"
  "ic\022\026\n\016upload_traffic\030\001 \001(\004\022\030\n\020download_t"
  "raffic\030\002 \001(\004\"5\n\005Speed\022\024\n\014upload_speed\030\001 "
  "\001(\004\022\026\n\016download_speed\030\002 \001(\004\"&\n\004User\022\020\n\010p"
  "assword\030\001 \001(\t\022\014\n\004hash\030\002 \001(\t\"3\n\021GetTraffi"
  "cRequest\022\036\n\004user\030\001 \001(\0132\020.trojan.api.User"
  "\"\261\001\n\022GetTrafficResponse\022\017\n\007success\030\001 \001(\010"
  "\022*\n\rtraffic_total\030\002 \001(\0132\023.trojan.api.Tra"
  "ffic\022(\n\rspeed_current\030\003 \001(\0132\021.trojan.api"
  ".Speed\022&\n\013speed_limit\030\004 \001(\0132\021.trojan.api"
  ".Speed\022\014\n\004info\030\005 \001(\t\"\021\n\017ListUserRequest\""
  "\300\001\n\020ListUserResponse\022\036\n\004user\030\001 \001(\0132\020.tro"
  "jan.api.User\022\016\n\006online\030\002 \001(\010\022*\n\rtraffic_"
  "total\030\003 \001(\0132\023.trojan.api.Traffic\022(\n\rspee"
  "d_current\030\004 \001(\0132\021.trojan.api.Speed\022&\n\013sp"
  "eed_limit\030\005 \001(\0132\021.trojan.api.Speed\"\277\001\n\016S"
  "etUserRequest\022\036\n\004user\030\001 \001(\0132\020.trojan.api"
  ".User\022&\n\013speed_limit\030\002 \001(\0132\021.trojan.api."
  "Speed\0227\n\toperation\030\003 \001(\0162$.trojan.api.Se"
  "tUserRequest.Operation\",\n\tOperation\022\007\n\003A"
  "dd\020\000\022\n\n\006Delete\020\001\022\n\n\006Modify\020\002\"0\n\017SetUserR"
  "esponse\022\017\n\007success\030\001 \001(\010\022\014\n\004info\030\002 \001(\t2d"
  "\n\023TrojanClientService\022M\n\nGetTraffic\022\035.tr"
  "ojan.api.GetTrafficRequest\032\036.trojan.api."
  "GetTrafficResponse\"\0002\377\001\n\023TrojanServerSer"
  "vice\022J\n\tListUsers\022\033.trojan.api.ListUserR"
  "equest\032\034.trojan.api.ListUserResponse\"\0000\001"
  "\022Q\n\nGetTraffic\022\035.trojan.api.GetTrafficRe"
  "quest\032\036.trojan.api.GetTrafficResponse\"\000("
  "\0010\001\022I\n\010SetUsers\022\032.trojan.api.SetUserRequ"
  "est\032\033.trojan.api.SetUserResponse\"\000(\0010\001B\005"
  "Z\003apib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trojangoapi_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trojangoapi_2eproto_sccs[9] = {
  &scc_info_GetTrafficRequest_trojangoapi_2eproto.base,
  &scc_info_GetTrafficResponse_trojangoapi_2eproto.base,
  &scc_info_ListUserRequest_trojangoapi_2eproto.base,
  &scc_info_ListUserResponse_trojangoapi_2eproto.base,
  &scc_info_SetUserRequest_trojangoapi_2eproto.base,
  &scc_info_SetUserResponse_trojangoapi_2eproto.base,
  &scc_info_Speed_trojangoapi_2eproto.base,
  &scc_info_Traffic_trojangoapi_2eproto.base,
  &scc_info_User_trojangoapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trojangoapi_2eproto_once;
static bool descriptor_table_trojangoapi_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trojangoapi_2eproto = {
  &descriptor_table_trojangoapi_2eproto_initialized, descriptor_table_protodef_trojangoapi_2eproto, "trojangoapi.proto", 1253,
  &descriptor_table_trojangoapi_2eproto_once, descriptor_table_trojangoapi_2eproto_sccs, descriptor_table_trojangoapi_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_trojangoapi_2eproto::offsets,
  file_level_metadata_trojangoapi_2eproto, 9, file_level_enum_descriptors_trojangoapi_2eproto, file_level_service_descriptors_trojangoapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trojangoapi_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trojangoapi_2eproto), true);
namespace trojan {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetUserRequest_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trojangoapi_2eproto);
  return file_level_enum_descriptors_trojangoapi_2eproto[0];
}
bool SetUserRequest_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetUserRequest_Operation SetUserRequest::Add;
constexpr SetUserRequest_Operation SetUserRequest::Delete;
constexpr SetUserRequest_Operation SetUserRequest::Modify;
constexpr SetUserRequest_Operation SetUserRequest::Operation_MIN;
constexpr SetUserRequest_Operation SetUserRequest::Operation_MAX;
constexpr int SetUserRequest::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Traffic::InitAsDefaultInstance() {
}
class Traffic::_Internal {
 public:
};

Traffic::Traffic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trojan.api.Traffic)
}
Traffic::Traffic(const Traffic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upload_traffic_, &from.upload_traffic_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_traffic_) -
    reinterpret_cast<char*>(&upload_traffic_)) + sizeof(download_traffic_));
  // @@protoc_insertion_point(copy_constructor:trojan.api.Traffic)
}

void Traffic::SharedCtor() {
  ::memset(&upload_traffic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_traffic_) -
      reinterpret_cast<char*>(&upload_traffic_)) + sizeof(download_traffic_));
}

Traffic::~Traffic() {
  // @@protoc_insertion_point(destructor:trojan.api.Traffic)
  SharedDtor();
}

void Traffic::SharedDtor() {
}

void Traffic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Traffic& Traffic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Traffic_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void Traffic::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.Traffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upload_traffic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_traffic_) -
      reinterpret_cast<char*>(&upload_traffic_)) + sizeof(download_traffic_));
  _internal_metadata_.Clear();
}

const char* Traffic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 upload_traffic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upload_traffic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 download_traffic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          download_traffic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Traffic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.Traffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 upload_traffic = 1;
  if (this->upload_traffic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_traffic(), target);
  }

  // uint64 download_traffic = 2;
  if (this->download_traffic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_download_traffic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.Traffic)
  return target;
}

size_t Traffic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.Traffic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 upload_traffic = 1;
  if (this->upload_traffic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_upload_traffic());
  }

  // uint64 download_traffic = 2;
  if (this->download_traffic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_download_traffic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Traffic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  const Traffic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Traffic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.Traffic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.Traffic)
    MergeFrom(*source);
  }
}

void Traffic::MergeFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upload_traffic() != 0) {
    _internal_set_upload_traffic(from._internal_upload_traffic());
  }
  if (from.download_traffic() != 0) {
    _internal_set_download_traffic(from._internal_download_traffic());
  }
}

void Traffic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Traffic::CopyFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Traffic::IsInitialized() const {
  return true;
}

void Traffic::InternalSwap(Traffic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(upload_traffic_, other->upload_traffic_);
  swap(download_traffic_, other->download_traffic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Traffic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Speed::InitAsDefaultInstance() {
}
class Speed::_Internal {
 public:
};

Speed::Speed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trojan.api.Speed)
}
Speed::Speed(const Speed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upload_speed_, &from.upload_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_speed_) -
    reinterpret_cast<char*>(&upload_speed_)) + sizeof(download_speed_));
  // @@protoc_insertion_point(copy_constructor:trojan.api.Speed)
}

void Speed::SharedCtor() {
  ::memset(&upload_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_speed_) -
      reinterpret_cast<char*>(&upload_speed_)) + sizeof(download_speed_));
}

Speed::~Speed() {
  // @@protoc_insertion_point(destructor:trojan.api.Speed)
  SharedDtor();
}

void Speed::SharedDtor() {
}

void Speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Speed& Speed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Speed_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upload_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_speed_) -
      reinterpret_cast<char*>(&upload_speed_)) + sizeof(download_speed_));
  _internal_metadata_.Clear();
}

const char* Speed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 upload_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upload_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 download_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          download_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Speed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 upload_speed = 1;
  if (this->upload_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_speed(), target);
  }

  // uint64 download_speed = 2;
  if (this->download_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_download_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.Speed)
  return target;
}

size_t Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.Speed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 upload_speed = 1;
  if (this->upload_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_upload_speed());
  }

  // uint64 download_speed = 2;
  if (this->download_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_download_speed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Speed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  const Speed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Speed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.Speed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.Speed)
    MergeFrom(*source);
  }
}

void Speed::MergeFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upload_speed() != 0) {
    _internal_set_upload_speed(from._internal_upload_speed());
  }
  if (from.download_speed() != 0) {
    _internal_set_download_speed(from._internal_download_speed());
  }
}

void Speed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speed::CopyFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed::IsInitialized() const {
  return true;
}

void Speed::InternalSwap(Speed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(upload_speed_, other->upload_speed_);
  swap(download_speed_, other->download_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Speed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void User::InitAsDefaultInstance() {
}
class User::_Internal {
 public:
};

User::User()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trojan.api.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:trojan.api.User)
}

void User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_trojangoapi_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

User::~User() {
  // @@protoc_insertion_point(destructor:trojan.api.User)
  SharedDtor();
}

void User::SharedDtor() {
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User& User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trojan.api.User.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trojan.api.User.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string password = 1;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trojan.api.User.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trojan.api.User.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 1;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTrafficRequest::InitAsDefaultInstance() {
  ::trojan::api::_GetTrafficRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::trojan::api::User*>(
      ::trojan::api::User::internal_default_instance());
}
class GetTrafficRequest::_Internal {
 public:
  static const ::trojan::api::User& user(const GetTrafficRequest* msg);
};

const ::trojan::api::User&
GetTrafficRequest::_Internal::user(const GetTrafficRequest* msg) {
  return *msg->user_;
}
GetTrafficRequest::GetTrafficRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trojan.api.GetTrafficRequest)
}
GetTrafficRequest::GetTrafficRequest(const GetTrafficRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::trojan::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trojan.api.GetTrafficRequest)
}

void GetTrafficRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTrafficRequest_trojangoapi_2eproto.base);
  user_ = nullptr;
}

GetTrafficRequest::~GetTrafficRequest() {
  // @@protoc_insertion_point(destructor:trojan.api.GetTrafficRequest)
  SharedDtor();
}

void GetTrafficRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
}

void GetTrafficRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTrafficRequest& GetTrafficRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTrafficRequest_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void GetTrafficRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.GetTrafficRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetTrafficRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trojan.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTrafficRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.GetTrafficRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.GetTrafficRequest)
  return target;
}

size_t GetTrafficRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.GetTrafficRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTrafficRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.GetTrafficRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTrafficRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTrafficRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.GetTrafficRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.GetTrafficRequest)
    MergeFrom(*source);
  }
}

void GetTrafficRequest::MergeFrom(const GetTrafficRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.GetTrafficRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::trojan::api::User::MergeFrom(from._internal_user());
  }
}

void GetTrafficRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.GetTrafficRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrafficRequest::CopyFrom(const GetTrafficRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.GetTrafficRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrafficRequest::IsInitialized() const {
  return true;
}

void GetTrafficRequest::InternalSwap(GetTrafficRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrafficRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTrafficResponse::InitAsDefaultInstance() {
  ::trojan::api::_GetTrafficResponse_default_instance_._instance.get_mutable()->traffic_total_ = const_cast< ::trojan::api::Traffic*>(
      ::trojan::api::Traffic::internal_default_instance());
  ::trojan::api::_GetTrafficResponse_default_instance_._instance.get_mutable()->speed_current_ = const_cast< ::trojan::api::Speed*>(
      ::trojan::api::Speed::internal_default_instance());
  ::trojan::api::_GetTrafficResponse_default_instance_._instance.get_mutable()->speed_limit_ = const_cast< ::trojan::api::Speed*>(
      ::trojan::api::Speed::internal_default_instance());
}
class GetTrafficResponse::_Internal {
 public:
  static const ::trojan::api::Traffic& traffic_total(const GetTrafficResponse* msg);
  static const ::trojan::api::Speed& speed_current(const GetTrafficResponse* msg);
  static const ::trojan::api::Speed& speed_limit(const GetTrafficResponse* msg);
};

const ::trojan::api::Traffic&
GetTrafficResponse::_Internal::traffic_total(const GetTrafficResponse* msg) {
  return *msg->traffic_total_;
}
const ::trojan::api::Speed&
GetTrafficResponse::_Internal::speed_current(const GetTrafficResponse* msg) {
  return *msg->speed_current_;
}
const ::trojan::api::Speed&
GetTrafficResponse::_Internal::speed_limit(const GetTrafficResponse* msg) {
  return *msg->speed_limit_;
}
GetTrafficResponse::GetTrafficResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trojan.api.GetTrafficResponse)
}
GetTrafficResponse::GetTrafficResponse(const GetTrafficResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from._internal_has_traffic_total()) {
    traffic_total_ = new ::trojan::api::Traffic(*from.traffic_total_);
  } else {
    traffic_total_ = nullptr;
  }
  if (from._internal_has_speed_current()) {
    speed_current_ = new ::trojan::api::Speed(*from.speed_current_);
  } else {
    speed_current_ = nullptr;
  }
  if (from._internal_has_speed_limit()) {
    speed_limit_ = new ::trojan::api::Speed(*from.speed_limit_);
  } else {
    speed_limit_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:trojan.api.GetTrafficResponse)
}

void GetTrafficResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTrafficResponse_trojangoapi_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&traffic_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&traffic_total_)) + sizeof(success_));
}

GetTrafficResponse::~GetTrafficResponse() {
  // @@protoc_insertion_point(destructor:trojan.api.GetTrafficResponse)
  SharedDtor();
}

void GetTrafficResponse::SharedDtor() {
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete traffic_total_;
  if (this != internal_default_instance()) delete speed_current_;
  if (this != internal_default_instance()) delete speed_limit_;
}

void GetTrafficResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTrafficResponse& GetTrafficResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTrafficResponse_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void GetTrafficResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.GetTrafficResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && traffic_total_ != nullptr) {
    delete traffic_total_;
  }
  traffic_total_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speed_current_ != nullptr) {
    delete speed_current_;
  }
  speed_current_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speed_limit_ != nullptr) {
    delete speed_limit_;
  }
  speed_limit_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* GetTrafficResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Traffic traffic_total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Speed speed_current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_current(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Speed speed_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trojan.api.GetTrafficResponse.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTrafficResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.GetTrafficResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .trojan.api.Traffic traffic_total = 2;
  if (this->has_traffic_total()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::traffic_total(this), target, stream);
  }

  // .trojan.api.Speed speed_current = 3;
  if (this->has_speed_current()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::speed_current(this), target, stream);
  }

  // .trojan.api.Speed speed_limit = 4;
  if (this->has_speed_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::speed_limit(this), target, stream);
  }

  // string info = 5;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trojan.api.GetTrafficResponse.info");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.GetTrafficResponse)
  return target;
}

size_t GetTrafficResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.GetTrafficResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 5;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // .trojan.api.Traffic traffic_total = 2;
  if (this->has_traffic_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_total_);
  }

  // .trojan.api.Speed speed_current = 3;
  if (this->has_speed_current()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_current_);
  }

  // .trojan.api.Speed speed_limit = 4;
  if (this->has_speed_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_limit_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTrafficResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.GetTrafficResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTrafficResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTrafficResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.GetTrafficResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.GetTrafficResponse)
    MergeFrom(*source);
  }
}

void GetTrafficResponse::MergeFrom(const GetTrafficResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.GetTrafficResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_traffic_total()) {
    _internal_mutable_traffic_total()->::trojan::api::Traffic::MergeFrom(from._internal_traffic_total());
  }
  if (from.has_speed_current()) {
    _internal_mutable_speed_current()->::trojan::api::Speed::MergeFrom(from._internal_speed_current());
  }
  if (from.has_speed_limit()) {
    _internal_mutable_speed_limit()->::trojan::api::Speed::MergeFrom(from._internal_speed_limit());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void GetTrafficResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.GetTrafficResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrafficResponse::CopyFrom(const GetTrafficResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.GetTrafficResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrafficResponse::IsInitialized() const {
  return true;
}

void GetTrafficResponse::InternalSwap(GetTrafficResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(traffic_total_, other->traffic_total_);
  swap(speed_current_, other->speed_current_);
  swap(speed_limit_, other->speed_limit_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrafficResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUserRequest::InitAsDefaultInstance() {
}
class ListUserRequest::_Internal {
 public:
};

ListUserRequest::ListUserRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trojan.api.ListUserRequest)
}
ListUserRequest::ListUserRequest(const ListUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trojan.api.ListUserRequest)
}

void ListUserRequest::SharedCtor() {
}

ListUserRequest::~ListUserRequest() {
  // @@protoc_insertion_point(destructor:trojan.api.ListUserRequest)
  SharedDtor();
}

void ListUserRequest::SharedDtor() {
}

void ListUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserRequest& ListUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserRequest_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void ListUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.ListUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ListUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.ListUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.ListUserRequest)
  return target;
}

size_t ListUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.ListUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.ListUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.ListUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.ListUserRequest)
    MergeFrom(*source);
  }
}

void ListUserRequest::MergeFrom(const ListUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.ListUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.ListUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserRequest::CopyFrom(const ListUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.ListUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserRequest::IsInitialized() const {
  return true;
}

void ListUserRequest::InternalSwap(ListUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUserResponse::InitAsDefaultInstance() {
  ::trojan::api::_ListUserResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::trojan::api::User*>(
      ::trojan::api::User::internal_default_instance());
  ::trojan::api::_ListUserResponse_default_instance_._instance.get_mutable()->traffic_total_ = const_cast< ::trojan::api::Traffic*>(
      ::trojan::api::Traffic::internal_default_instance());
  ::trojan::api::_ListUserResponse_default_instance_._instance.get_mutable()->speed_current_ = const_cast< ::trojan::api::Speed*>(
      ::trojan::api::Speed::internal_default_instance());
  ::trojan::api::_ListUserResponse_default_instance_._instance.get_mutable()->speed_limit_ = const_cast< ::trojan::api::Speed*>(
      ::trojan::api::Speed::internal_default_instance());
}
class ListUserResponse::_Internal {
 public:
  static const ::trojan::api::User& user(const ListUserResponse* msg);
  static const ::trojan::api::Traffic& traffic_total(const ListUserResponse* msg);
  static const ::trojan::api::Speed& speed_current(const ListUserResponse* msg);
  static const ::trojan::api::Speed& speed_limit(const ListUserResponse* msg);
};

const ::trojan::api::User&
ListUserResponse::_Internal::user(const ListUserResponse* msg) {
  return *msg->user_;
}
const ::trojan::api::Traffic&
ListUserResponse::_Internal::traffic_total(const ListUserResponse* msg) {
  return *msg->traffic_total_;
}
const ::trojan::api::Speed&
ListUserResponse::_Internal::speed_current(const ListUserResponse* msg) {
  return *msg->speed_current_;
}
const ::trojan::api::Speed&
ListUserResponse::_Internal::speed_limit(const ListUserResponse* msg) {
  return *msg->speed_limit_;
}
ListUserResponse::ListUserResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trojan.api.ListUserResponse)
}
ListUserResponse::ListUserResponse(const ListUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::trojan::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_traffic_total()) {
    traffic_total_ = new ::trojan::api::Traffic(*from.traffic_total_);
  } else {
    traffic_total_ = nullptr;
  }
  if (from._internal_has_speed_current()) {
    speed_current_ = new ::trojan::api::Speed(*from.speed_current_);
  } else {
    speed_current_ = nullptr;
  }
  if (from._internal_has_speed_limit()) {
    speed_limit_ = new ::trojan::api::Speed(*from.speed_limit_);
  } else {
    speed_limit_ = nullptr;
  }
  online_ = from.online_;
  // @@protoc_insertion_point(copy_constructor:trojan.api.ListUserResponse)
}

void ListUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUserResponse_trojangoapi_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&user_)) + sizeof(online_));
}

ListUserResponse::~ListUserResponse() {
  // @@protoc_insertion_point(destructor:trojan.api.ListUserResponse)
  SharedDtor();
}

void ListUserResponse::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete traffic_total_;
  if (this != internal_default_instance()) delete speed_current_;
  if (this != internal_default_instance()) delete speed_limit_;
}

void ListUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserResponse& ListUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserResponse_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void ListUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.ListUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && traffic_total_ != nullptr) {
    delete traffic_total_;
  }
  traffic_total_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speed_current_ != nullptr) {
    delete speed_current_;
  }
  speed_current_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speed_limit_ != nullptr) {
    delete speed_limit_;
  }
  speed_limit_ = nullptr;
  online_ = false;
  _internal_metadata_.Clear();
}

const char* ListUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trojan.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Traffic traffic_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Speed speed_current = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_current(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Speed speed_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.ListUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // bool online = 2;
  if (this->online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_online(), target);
  }

  // .trojan.api.Traffic traffic_total = 3;
  if (this->has_traffic_total()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::traffic_total(this), target, stream);
  }

  // .trojan.api.Speed speed_current = 4;
  if (this->has_speed_current()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::speed_current(this), target, stream);
  }

  // .trojan.api.Speed speed_limit = 5;
  if (this->has_speed_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::speed_limit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.ListUserResponse)
  return target;
}

size_t ListUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.ListUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .trojan.api.Traffic traffic_total = 3;
  if (this->has_traffic_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_total_);
  }

  // .trojan.api.Speed speed_current = 4;
  if (this->has_speed_current()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_current_);
  }

  // .trojan.api.Speed speed_limit = 5;
  if (this->has_speed_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_limit_);
  }

  // bool online = 2;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.ListUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.ListUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.ListUserResponse)
    MergeFrom(*source);
  }
}

void ListUserResponse::MergeFrom(const ListUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.ListUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::trojan::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_traffic_total()) {
    _internal_mutable_traffic_total()->::trojan::api::Traffic::MergeFrom(from._internal_traffic_total());
  }
  if (from.has_speed_current()) {
    _internal_mutable_speed_current()->::trojan::api::Speed::MergeFrom(from._internal_speed_current());
  }
  if (from.has_speed_limit()) {
    _internal_mutable_speed_limit()->::trojan::api::Speed::MergeFrom(from._internal_speed_limit());
  }
  if (from.online() != 0) {
    _internal_set_online(from._internal_online());
  }
}

void ListUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.ListUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserResponse::CopyFrom(const ListUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.ListUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserResponse::IsInitialized() const {
  return true;
}

void ListUserResponse::InternalSwap(ListUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_, other->user_);
  swap(traffic_total_, other->traffic_total_);
  swap(speed_current_, other->speed_current_);
  swap(speed_limit_, other->speed_limit_);
  swap(online_, other->online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetUserRequest::InitAsDefaultInstance() {
  ::trojan::api::_SetUserRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::trojan::api::User*>(
      ::trojan::api::User::internal_default_instance());
  ::trojan::api::_SetUserRequest_default_instance_._instance.get_mutable()->speed_limit_ = const_cast< ::trojan::api::Speed*>(
      ::trojan::api::Speed::internal_default_instance());
}
class SetUserRequest::_Internal {
 public:
  static const ::trojan::api::User& user(const SetUserRequest* msg);
  static const ::trojan::api::Speed& speed_limit(const SetUserRequest* msg);
};

const ::trojan::api::User&
SetUserRequest::_Internal::user(const SetUserRequest* msg) {
  return *msg->user_;
}
const ::trojan::api::Speed&
SetUserRequest::_Internal::speed_limit(const SetUserRequest* msg) {
  return *msg->speed_limit_;
}
SetUserRequest::SetUserRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trojan.api.SetUserRequest)
}
SetUserRequest::SetUserRequest(const SetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::trojan::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_speed_limit()) {
    speed_limit_ = new ::trojan::api::Speed(*from.speed_limit_);
  } else {
    speed_limit_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:trojan.api.SetUserRequest)
}

void SetUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetUserRequest_trojangoapi_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&user_)) + sizeof(operation_));
}

SetUserRequest::~SetUserRequest() {
  // @@protoc_insertion_point(destructor:trojan.api.SetUserRequest)
  SharedDtor();
}

void SetUserRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete speed_limit_;
}

void SetUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetUserRequest& SetUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetUserRequest_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void SetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.SetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speed_limit_ != nullptr) {
    delete speed_limit_;
  }
  speed_limit_ = nullptr;
  operation_ = 0;
  _internal_metadata_.Clear();
}

const char* SetUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trojan.api.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.Speed speed_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trojan.api.SetUserRequest.Operation operation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::trojan::api::SetUserRequest_Operation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.SetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // .trojan.api.Speed speed_limit = 2;
  if (this->has_speed_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::speed_limit(this), target, stream);
  }

  // .trojan.api.SetUserRequest.Operation operation = 3;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.SetUserRequest)
  return target;
}

size_t SetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.SetUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trojan.api.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .trojan.api.Speed speed_limit = 2;
  if (this->has_speed_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_limit_);
  }

  // .trojan.api.SetUserRequest.Operation operation = 3;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.SetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.SetUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.SetUserRequest)
    MergeFrom(*source);
  }
}

void SetUserRequest::MergeFrom(const SetUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.SetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::trojan::api::User::MergeFrom(from._internal_user());
  }
  if (from.has_speed_limit()) {
    _internal_mutable_speed_limit()->::trojan::api::Speed::MergeFrom(from._internal_speed_limit());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void SetUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.SetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserRequest::CopyFrom(const SetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.SetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserRequest::IsInitialized() const {
  return true;
}

void SetUserRequest::InternalSwap(SetUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_, other->user_);
  swap(speed_limit_, other->speed_limit_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetUserResponse::InitAsDefaultInstance() {
}
class SetUserResponse::_Internal {
 public:
};

SetUserResponse::SetUserResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trojan.api.SetUserResponse)
}
SetUserResponse::SetUserResponse(const SetUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:trojan.api.SetUserResponse)
}

void SetUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetUserResponse_trojangoapi_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

SetUserResponse::~SetUserResponse() {
  // @@protoc_insertion_point(destructor:trojan.api.SetUserResponse)
  SharedDtor();
}

void SetUserResponse::SharedDtor() {
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetUserResponse& SetUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetUserResponse_trojangoapi_2eproto.base);
  return *internal_default_instance();
}


void SetUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trojan.api.SetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* SetUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trojan.api.SetUserResponse.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trojan.api.SetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trojan.api.SetUserResponse.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trojan.api.SetUserResponse)
  return target;
}

size_t SetUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trojan.api.SetUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trojan.api.SetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trojan.api.SetUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trojan.api.SetUserResponse)
    MergeFrom(*source);
  }
}

void SetUserResponse::MergeFrom(const SetUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trojan.api.SetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SetUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trojan.api.SetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserResponse::CopyFrom(const SetUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trojan.api.SetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserResponse::IsInitialized() const {
  return true;
}

void SetUserResponse::InternalSwap(SetUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace trojan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trojan::api::Traffic* Arena::CreateMaybeMessage< ::trojan::api::Traffic >(Arena* arena) {
  return Arena::CreateInternal< ::trojan::api::Traffic >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::Speed* Arena::CreateMaybeMessage< ::trojan::api::Speed >(Arena* arena) {
  return Arena::CreateInternal< ::trojan::api::Speed >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::User* Arena::CreateMaybeMessage< ::trojan::api::User >(Arena* arena) {
  return Arena::CreateInternal< ::trojan::api::User >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::GetTrafficRequest* Arena::CreateMaybeMessage< ::trojan::api::GetTrafficRequest >(Arena* arena) {
  return Arena::CreateInternal< ::trojan::api::GetTrafficRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::GetTrafficResponse* Arena::CreateMaybeMessage< ::trojan::api::GetTrafficResponse >(Arena* arena) {
  return Arena::CreateInternal< ::trojan::api::GetTrafficResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::ListUserRequest* Arena::CreateMaybeMessage< ::trojan::api::ListUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::trojan::api::ListUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::ListUserResponse* Arena::CreateMaybeMessage< ::trojan::api::ListUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::trojan::api::ListUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::SetUserRequest* Arena::CreateMaybeMessage< ::trojan::api::SetUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::trojan::api::SetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trojan::api::SetUserResponse* Arena::CreateMaybeMessage< ::trojan::api::SetUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::trojan::api::SetUserResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
